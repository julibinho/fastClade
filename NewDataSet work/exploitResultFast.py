# -*- coding: utf-8 -*-



"""
This program, build two set. One with the name of proteins written in cSeed, then with the proteins of cSeq.

Then, it read the result file. 
If the first column (the query) is contained in cSeq, then we know it should appartain to cSeed to.
    -> in contrary, if the query isn't contained in cSeq, it shouldn't appartain to cSeed.

those two case already give the number of True positif, and True negatif.

Then :
    If a query isn't contained in cSeq but in cSeed, it's a false positiv, since we know that cSeq appartain in the family and others don't.
    If a query is conained in cSeq but not in cSeed, it's a false negativ, since it should have been reconised, but is not.
"""


cSeed="./partC++/partC++/split/seed/seedNamePF04857"
cSeq="./partC++/partC++/split/test/allseqNamePF04857"
resultfile="./partC++/partC++/toUploadHitHub/result2.txt"



checkSeed=False
checkSeq=False

################# Construction de la base de donnee :


def constructSetFromFilename(filename):
    a=set()
    f=open(filename,'r')
    for line in f :
       # print(line)
        line=line.strip('\n')
        line=line.strip('>')
        a.add(line)
    return a

def exploitRes(SeedDB,SeqDB,result):
    TP=0;
    TN=0;
    FP=0;
    FN=0;
    expected=len(SeqDB);
    
    
    
    
    f=open(result,'r')
    for line in f :
        line=line.split()
        if(len(line)<3):
            #print (line[0])
            if (line[0] in SeqDB):
                FN+=1
            else :
                TN+=1
        else :
            #print(line[0],line[2])
            if(line[0] in SeqDB and line[2] in SeedDB):
                TP+=1
            if(line[0] not in SeqDB and line[2] in SeedDB ):
                FP+=1
            if(line[0] in SeqDB and line[2] not in SeedDB):
                FN+=1
            if(line[0] not in SeqDB and line[2] not in SeedDB):
                TN+=1
    
    total=TP+TN+FP+FN
    
    print ("True positif : ",TP, "sur ",expected," soit : ",(TP/expected)*100,"%");
    print ("True nefatif : ",TN, "sur ",total-expected," soit : ",(TN/(total-expected))*100,"%");
    
    print ("False Positif : ",FP, "sur ",total-expected," soit : ",(FP/(total-expected))*100,"%");
    print ("False Negatif : ",FN, "sur ",expected," soit : ",(FN/expected)*100,"%");
    
    print("####")
    print("Precision :",((TP)/(TP+FP))*100)
    print("Recall :",((TP)/(TP+FN))*100)
    print("Accuracy :",((TP+TN)/(TP+TN+FP+FN))*100)
    print("FScore :",((( 2* ((TP)/(TP+FN)) * ((TP)/(TP+FP))) /(((TP)/(TP+FN))+((TP)/(TP+FP)))))*100)
    
    print ("TP :",TP,"   TN :",TN,"   FP:",FP,"   FN:",FN);


exploitRes(constructSetFromFilename(cSeed),constructSetFromFilename(cSeq),resultfile)












